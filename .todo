[d] - [bf] use bincode & serde
[d] - [bfutils] use structopt
[d] - [r] pouzit mailbox, a az potom fifo
[d] - [r] implement legit input system
[d] - [opt][r] optmize sky model to compute constant values on CPU and only when Sun changes
[d] - [r] use transient images as framebuffer attachment's in render pass
[d] - [r] use single triangle instead of two in full-screen passes
[d] - upgrade winit to 0.20
[d] - [r] support choosing of gpu when multiple gpus on computer
[d] - [opt][r] move transfer operations into transfer queue
[d] - [r/io] load resources asynchronously

- [opt][bf] make mipmap_count() O(1) by computing recurrent relation
- [opt][obj2bf] fix O(n^2) vertex compare algo stored in btree instead of Vec
- [obj2bf] decide how does recalculate_normals() work with duped (on import) vertices
- [gh] revisit gh actions and setup coverage testing
- [matmake] tool to generate material file from images and configuration
- [img2bf] use intel_tex crate to provide BC7 and better compression & image quality
- [inf] consider using `argh` / `pico-arg` instead of `clap` + `structopt` to cut down on build time


- [opt][r] implement pipeline cache
- ![r] implement debug line renderer (agregate lines in fluent interface and then batch with ubo color)
- [r] use debug_markers in rendering pipeline with UnsafeCommandBufferBuilder
- [r] get rid of .unwrap() from everywhere
- [r] oddelit winit of vulkano
- [r] nepouzivat vulkano-shaders
- [r] vyrobit shader hot-realoding
- [r] support for sparse memory bindings
- [r] support for BC7 and modern DXT compression formats
- [r] support resizing window / recreating swapchain
- [r] remove all panics from the application
- [r] use reverse-Z / inverted depth buffer to fix precision and z-fighting
- [opt][r] find all possible caching options to reduce per-frame CPU/GPU

- [r/io] rework loading pipeline to reduce copies and time

- [img2bf] support multiple inputs
- [img2bf] support redirection/swizzling i0.r -> o.r, i1.r -> o.g, i2.r -> o.b

- constraint T: Sync
- use https://github.com/jonhoo/rust-evmap for storage
- derive storage with proc macro

Resource<T> (potentially unloaded resource)
 - loading_default
 - error_default

Mesh<VDef, I>
 - IBO
 - VBO


Model:
 - meshes: <Resource<Mesh>, Resource<Material>>
 - descriptor_set<MatrixData>
 - transform

Material
 - albedo_color: vec3
 - albedo_map: Resource<>
 - normal_map: Resource<>
 - roughness_map: Resource<>
 - metallic_map: Resource<>
 - alpha_cutoff: f32





Texture

Material
 - descriptor_set
 - textures...
Light
Camera


MeshComp
MatComp
TransformComp
LightComp
RigidbodyComp
CameraComp


enum Pass {
    ParticlesSimulation,     // compute bound (dont have depth and normal buffers)
    Shadows,                 // graphic bound
    DepthPrePass,            // graphic bound
    Skybox,
    GBuffer,
    Decals,
    AmbientOcclusion,
    LightCulling,            // compute bound
    IndirectLighting,
    DirectLighting,
    TransparentForward,
    Composite,
    PostProcessing,
    UI,
    Finished,
}




